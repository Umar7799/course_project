generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  name             String
  email            String     @unique
  password         String
  role             Role       @default(USER)
  templates        Template[] @relation("TemplateAccess")
  authoredTemplates Template[] @relation("AuthorOfTemplate") // New relation for authored templates
  forms            Form[]
  comments         Comment[]
  likes            Like[]
}



model Template {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  isPublic    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  topic       String?
  tags        String[]
  images       String[]
  authorId    Int
  author      User       @relation("AuthorOfTemplate", fields: [authorId], references: [id]) // Specify the opposite relation name
  allowedUsers User[]    @relation("TemplateAccess")
  questions   Question[]
  forms       Form[]
  comments    Comment[]
  likes       Like[]
}



model Comment {
  id         Int      @id @default(autoincrement())
  text       String
  createdAt  DateTime @default(now())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  templateId Int
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Like {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  templateId Int
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId]) // ðŸ‘ˆ one like per user per template
}

model Question {
  id         Int          @id @default(autoincrement())
  text       String
  type       QuestionType
  templateId Int // ðŸ‘ˆ Changed from String to Int
  template   Template     @relation(fields: [templateId], references: [id], onDelete: Cascade)
  answers    Answer[]
}

model Form {
  id          Int      @id @default(autoincrement())
  submittedAt DateTime @default(now())
  userId      Int // ðŸ‘ˆ Changed from String to Int
  user        User     @relation(fields: [userId], references: [id])
  templateId  Int // ðŸ‘ˆ Changed from String to Int
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  answers     Answer[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  response   String
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  formId     Int
  form       Form     @relation(fields: [formId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum QuestionType {
  SINGLE_LINE
  MULTI_LINE
  INTEGER
  CHECKBOX
}
